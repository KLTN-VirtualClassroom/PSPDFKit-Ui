<!-- <script src="http://localhost:5000/pspdfkit.js"></script> -->
<script src="https://pdfserver.virtedy.com/pspdfkit.js"></script>

<!-- 2. Element where PSPDFKit will be mounted. -->
<div id="pspdfkit" style="width: 100%; height: 100%"></div>

<!-- <script type='text/javascript' src='https://socket.kltnvirtualclassroom.online/socket.io/socket.io.js'></script> -->
<script
  src="https://cdn.socket.io/4.6.0/socket.io.min.js"
  integrity="sha384-c79GN5VsunZvi+Q/WObgk2in0CbZsHnjEqvFxC5DxHn9lTfNce2WW6h2pH6u/kF+"
  crossorigin="anonymous"
></script>

<!-- 3. Initialize PSPDFKit. -->
<script>
  // const { List } = PSPDFKit.Immutable;
  // const { DrawingPoint, Rect } = PSPDFKit.Geometry;
  // const { InkAnnotation } = PSPDFKit.Annotations;
  // const { Point } = PSPDFKit.Geometry;

  PSPDFKit.load({
    container: "#pspdfkit",
    documentId: "<%= documentId %>",
    authPayload: { jwt: "<%= jwt %>" },
    autoSaveMode: PSPDFKit.AutoSaveMode.IMMEDIATE,
    instant: true,
  })
    .then(async function (instance) {
      // const annotations = await instance.getAnnotations(0);
      // const MediaAnnotations = annotations.filter(
      //   (annotation) =>
      //     annotation instanceof PSPDFKit.Annotations.MediaAnnotation
      // );

      const socket = new io("https://socket.virtedy.com");
      // const socket = new io("http://localhost:3131");
      var params = location.href.split("?")[1].split("&");
      var data = {};
      for (x in params) {
        data[params[x].split("=")[0]] = params[x].split("=")[1];
      }
      const roomId = data.roomId;

      socket.emit("get-room-info", { roomId: roomId, type: "pdf" });

      const scrollKit =
        instance.contentDocument.querySelector(".PSPDFKit-Scroll");
      // const ratioY = scrollKit.scrollTop / scrollKit.scrollHeight;
      // const ratioX = scrollKit.scrollLeft / scrollKit.scrollWidth;

      let old_ratioX = null;
      let old_ratioY = null;
      let sync_status = false;

      scrollKit.addEventListener("scroll", function () {
        //console.log(scrollKit.scrollTop + " And " + old_ratioX);
        if (!sync_status) {
          if (
            scrollKit.scrollTop !== old_ratioX ||
            scrollKit.scrollLeft !== old_ratioY
          ) {
            old_ratioX = scrollKit.scrollTop;

            old_ratioY = scrollKit.scrollLeft;

            //console.log("Event " + scrollKit.scrollTop);

            socket.emit("scrolling-pdf", {
              ratioX: scrollKit.scrollTop,
              ratioY: scrollKit.scrollLeft,
            });
          }
        } else sync_status = false;
      });

      socket.on("sync-scrolling-pdf", async (e) => {
        const getData = function () {
          (scrollKit.scrollTop = e.ratioX), (scrollKit.scrollLeft = e.ratioY);
          sync_status = true;
        };
        //console.log("Sync " + scrollKit.scrollTop);

        await getData();
      });

      socket.on("sync-scrolling-pdf-first-access", (e) => {
        (scrollKit.scrollTop = e.ratioX), (scrollKit.scrollLeft = e.ratioY);
      });

      // instance.addEventListener(
      //   "instant.connectedClients.change",
      //   (clients) => {
      //     console.log(clients.toJS());
      //   }
      // );

      let sync_zoom = false;

      const handleZoomEvent = (e) => {
        if (!sync_zoom)
          socket.emit("pdf-zoom", {
            value: e,
          });
        else sync_zoom = false;
      };

      instance.addEventListener("viewState.zoom.change", handleZoomEvent);

      socket.on("change-pdf-zoom", (e) => {
        sync_zoom = true;
        instance.setViewState((viewState) => viewState.set("zoom", e.value));
      });

      socket.on("pdf-current-zoom", (e) => {
        instance.setViewState((viewState) => viewState.set("zoom", e.value));
      });

      console.log("Successfully mounted PSPDFKit", instance);
    })
    .catch(function (error) {
      console.error(error.message);
    });
</script>

<script>
  // const scrollDemo = document.querySelector("#pspdfkit");
  // //console.log(scrollDemo.firstChild.firstChild)
  // const child = scrollDemo.firstChild.firstChild;
  // const child_doc = child.contentDocument;
  // console.log(child.contentDocument);
  // child_doc.addEventListener("scroll", function (event) {
  //   console.log(event);
  // });
  // child_doc.onscroll = () => {
  //   console.log("ROLLEE");
  // };
</script>
